# 模块
- 一个模块就是一个包含python代码的文件，后缀名是.py就可以，模块就是给python文件
- 为什么用模块
    - 程序太大，编写维护非常不方便，需要拆分
    - 模块可以增加代码重复利用的方式
    - 当做命名空间使用，避免命名冲突
- 如何定义模块
    - 模块就是一个普通文件，所以任何代码可以直接书写
    - 不过根据模块的规范，最好在模块中编写以下内容
        - 函数(单一功能)
        - 类(相似功能或类似业务)
        - 测试代码
- 如何使用模块
    - 模块直接导入
    - 语法
        - import module_name
        - module_name.function_name
        - module_name.class_name 
    - import 模块名 as 别名
    - 可使用别名代替模块名
    - from module_name import func_name，class_name
        - 使用模块中的指定函数或者类（有选择性导入）
        - 导入指定函数或类后，可以直接使用，没有前缀
    - from module_name import *
        - 导入模块所有内容，优点是不用写前缀，缺点可能会命名出问题
- 可以借助于Importlib包可以实现以数字开头的模块的名称
    - data = importlib.import_module(module_name)
    - 之后使用data代替数字开头的模块名
# 模块的搜索路径和存储
- 什么是模块的搜索路径：
    - 加载模块的时候，系统会在哪些地方寻找此模块
- 系统默认的模块搜索路径
    - import sys
    - sys .path 属性可以获取路径列表
    - 添加搜索路径（给列表添加元素sys.path.append(dir))
- 模块加载顺序
    - 1.搜索内存中已经加载好的模块
    - 2.搜索python的内置模块
    - 3.搜索sys.path路径
# 包
- 包是以种组织管理代码的方式，包里存放的是模块
- 用于将模块包含在一起的文件夹就是包
- 自定义包的结构
    - （包（__init__.py包的标志文件）（模块（子包（__init__.py文件）（子包模块）））
- 包的导入操作
    - import package_name(直接导入一个包，可以使用__init__.py中的内容)
    - 使用方式
        - package_name.func_name
        - package_name.class_name.func_name()
        - import package_name as 别名
            - 具体用法和作用方式，跟上述简单导入一致
            - 注意此种方式是默认对__init__.内容的导入
        - import package.module
            - 导入包中某一个具体的模块
            - 使用方法
                - package.module.func_name
                - package.module.class.func()
                - package.module.class.var
        - import package.module as 别名
            - 给包的模块取别名
- from package import module1，module2....
    - 这种导入方法不执行__init__的内容
        - from package_name import module
        - module class_name
- from package import *
    - 导入当前包 __init__.py文件中所有的函数和类
    - 使用方法
       - func_name()
       - class_name.func_name()
       - class_name.var
       - 没有前缀
- from package.module import *
    - 导入包中指定的模块的所有内容
    - 使用方法
        - func_name()
        - class_name.func_name()
- 在开发环境中经常会引用其他模块，可以在当前包中直接导入其他模块中内容
    - import 完整的包或者模块的路径
- __all__的用法
    - 在使用from package import * 的时候 * 可以导入的内容
    - __init__.py中如果文件为空，或者没有__all__,那么只可以把__all__中的内容导入
    - __init__如果设置了__all__的值，那么则按照__all__指定的子包或模块进行加载
    如此则不会载入__init__中的内容
    - __all__ = ['module1','package1'......]
# 命名空间
- 用于区分不同位置不同功能但相同名称的函数或者变量的一个特点前缀
- 作用是防止命名冲突
