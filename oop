##相关代码文件 oop1.py oop2.py
#oop
- 思想
    - 以模块化思想解决工程问题解决
    - 面向过程vs面向对象
- 常用名词
    - OO:面向对象
    - ooa:分析
    - ood:设计
    - oop:编程
    - ooi:实现
    - OOA -> OOD -> OOI
- 类vs对象
    - 类：抽象，描述的是一个集合，侧重于共性
    - 对象：具象，描述的是个体，一个对象是组成一个类的个体
- 类的内容
    - 动作，函数
    - 属性，变量
    - 只有这两个
- 定义类: class关键字
- 类命名：
    - 遵循大驼峰命名
    - 第一个字母大写
- self可以用别的名称代替
- self不是关键字
- 作用是指代本身
- 调用函数时，默认实例作为第一个参数传入
# 类变量的作用域
- 类变量：属于类自己的变量
- 实例变量：属于实例的变量
# 访问类的属性
- 在类里面如果强制访问类的的属性，则需要使用__class__(两个下划线)
- 类方法：
- 定义类的方法的时候没有self参数
- 类方法用类来调用，Student.func()，类方法只允许使用类的内容
- 两种用法，Student.func(),__class__.func()
- 访问对象成员，使用句点操作符（.）
    - obj.成员属性
    - obj.成员方法
- 可通过默认内置变量检查类和对象的所有成员
    - 对象所有成员检查
        obj.__dict__
    -类所有成员
        class_name.__dict__(两个下划线)
#类和对象的成员分析
- 类和对象都可以存储成员，成员可以归类 所有，也可以归对象所有
- 类存储成员时使用的是与类关联的一个对象
- 对象存储成员时是存储在当前对象上
- 类实例的属性和其对象的实例属性 在不对给对象实例属性 赋值的情况下（初始化后没对属性进行赋值操作），指向同一个变量
- 对象访问一个成员时，如果对象中没有该成员，尝试访问类中同名成员，如果对象中有此成员，一定使用对象中的成员
- 创建对象的时候，类中的成员不会自动放入对象中，而是一个空对象，没有成员
- 通过对象对类中成员重新赋值或者通过对象添加成员时，对应成员会保存在对象中，而不会修改类成员
# 关于self
- self在对象的方法中表示当前对象本身，如果通过对象调用一个方法，那么该对象会自动传入到当前方法的第一个参数中
- self并不是关键字，只是一个用于接受对象的普通参数，理论上可以用任何一个普通变量名代替
- 方法中有self形参的方法称为非绑定类的方法，可以通过对象访问，没有self的是绑定类的方法，只能通过类访问，使用类名访问，或者__class__访问
- 方法中的self可以接受其他一些类型的传入，鸭子模型：我们并不关心对象是什么类型，到底是不是鸭子，只关心行为
#oop-python 面向对象，（ObjectOriented,OO)
- oop思想
    - 接触到任意一个任务，首先想到的任务是这个世界的构成，是有模型组成的
#构造函数
- 在对象实例化时，系统自动调用的一个函数叫构造函数，通常此函数用来对实例对象进行初始化
- 在函数实例化的时候调用到的一个函数
- 自动调用
- 要求，第一个参数必须有，一般是self
- 构造函数的调用时间， 一般认为在实例化时第一个被调用
- 类在实例化的时候，执行一些基础性的初始化的工作
- 使用特殊的名称和写法
- 在实例化的时候自动执行
- 是在实例化的时候第一个被执行的函数
- 构造函数的继承：
    - 构造函数默认继承，子类如果没有构造函数，则自动调用父类的构造函数，但是找到的父类的构造函数参数必须要匹配，否则报错
    - 是按MRO顺序查找
    - 一旦子类定义了构造函数，则不再自动调用父类的构造函数
# 面向对象的三大特征
- 继承
- 封装
- 多态
#封装
- 封装就是对对象的成员进行访问限制
    - 封装的三个级别：
    - 公开：public
    - 受保护：protected
    - 私有的，private
    - public，private，protected，不是关键字
- 判别对象的位置
    - 对象内部
    - 对象外部
    - 子类中
- 私有
    - 私有成员是最高级别的封装，只能在当前类或对象中访问
    - 在成员前面添加两个下划线即可
    - python 的私有不是真的私有，是一种称为name mangling的改名策略
    - 可以使用对象._类名__成员名访问
- 受保护的封装 protected
    - 受保护的封装是将对象成员进行一定级别的封装，然后，在类中或子类中都可以进行访问，但是在外部不行
    - 封装方法： 在成员名称前添加一个下划线即可
    - https://blog.csdn.net/handsomekang/article/details/40303207?utm_source=blogxgwz1
- 公开的，公共的 public
    - 公告的封装实际对成员没有任何操作，任何地方都可以访问
#继承
- 一个类可以获得另一个类中的成员属性和成员方法（is-a)关系
- 作用，减少代码，增加代码复用功能，同时设置类与类之间的关系
- 子类可以使用父类定义的内容或行为等
- 被继承的类叫父类
- 用于继承的类叫子类，也叫派生类
- 单继承和多继承
    - 单继承：每个类只能继承一个父类
    - 多继承：每个类允许继承多个父类
- 单继承和多继承的优缺点
    - 单继承
        - 优点：传承有序逻辑清晰，语法简单隐患少
        - 缺点：功能不能无线扩展，只能在当前唯一的继承链中扩展
    - 多继承
        - 优点：类的功能扩展方便
        - 缺点：继承关系混乱
- 继承的特征
    - 父类，基类，超类：被继承的类，Base class，super class
    - 所有类，都必须有一个父类（object）
    - 如果没有，则默认为是object的子类
    - 子类可以有多个父类，也就是多继承
    - 子类一旦继承到父类，则可以使用父类中除私有成员外的所有内容
    - 子类继承父类后并没有将父类成员完全赋值到子类中，而是通过引用关系访问调用
    - 子类中可以定义独有的成员属性和方法
    - 子类中定义的成员如果和父类成员相同，则优先使用子类成员
    - 子类如果想扩充父类的方法，可以在定义新方法的同时访问父类成员进行代码重用，可以使用父类名.父类成员的格式来调用父类成员，也可以使用super().父类成员的格式来调用
    - 扩充父类的功能只是在子类中调用父类的函数，并不改变父类原有的功能，是在子类方法中添加父类的方法，super().父类的方法，super()代替父类名
- 继承中变量的查找顺序
    - 有限查找自己的变量
    - 没有则查找父类
    - 构造函数如果本类中没有定义，则自动查找父类构造函数
    - 如果本类有定义，则不再继续向上查找
- super
 - super不是关键字，而是一个类
 - super的作用是获取MRO(MethodResolutionOrder)列表中的第一个类
 - super 与父类直接没有任何实质关系，但是通过super可以调用到父类
    - super的使用方法
        - 在构造函数中调用父类的构造函数
# 菱形继承和钻石继承问题
- 多个子类继承自同一父类，这些子类又被同一个类继承，形成了一个菱形图谱
- https://www.cnblogs.com/whatisfantasy/p/6046991.html
- 关于多继承的MRO
    - MRO就是多继承中，用于保存继承顺序的一给列表
    - python 本身采用C3算法来对多继承的菱形继承进行计算的结果
    - MRO列表的计算原则(classname.__mro__)
        - 子类永远在父类前面
        - 如果有多个父类，则根据语法中括号内类的书写顺序存放
        - 如果多个类继承了同一个父类，孙子类只会选取继承语法括号中第一个父类的父类
#多态
- 多态就是同一给对象在不同情况下有不同的状态出现
- 多态不是语法，是一种设计思想
- 多态性：一种调用方式，不同的执行效果
- 多态：同一事物的多种形态
https://www.cnblogs.com/luchuangao/p/6739557.html
- Mixin设计模式
    - 主要采用多继承方式对类的功能进行扩展
- 我们使用多继承语法来实现Mixin
- https://www.zhihu.com/question/20778853
- https://blog.csdn.net/robinjwong/article/details/48375833?utm_source=blogxgwz5
- https://www.cnblogs.com/xybaby/p/6484262.html
- runforever.github.io/2014-07-19/2014-07-19-python-mixin学习笔记/ 
- 使用Mixin实现多继承的时候非常小心
    - 首先他必须表示某一单一功能，而不是某个物品
    - 职责功能必须单一，如果有多给功能，则写多个Mixin
    - Mixin不能依赖于子类的功能
    - 子类即使没有继承这个Mixin类，也能照样能工作，只是少了某个功能
- 优点
    - 使用Mixin可以在不对类进行任何修改的情况下，扩充功能
    - 可以方便的组织和维护不同功能组件的划分
    - 可以根据需要任意调整功能类的组合
    - 可以避免创建很多新的类，导致类的继承混乱
    
#类中的相关函数
- issubclass:可以用来检测两个类的父子类
- isinstance：检测对象是否是一个类的实例
- hasattr: 检测一个对象是否有成员xxx
- getattr
- setattr
- delattr（help一下）
- dir:获取对象的成员列表
# 类的成员描述符（属性）
- 类的成员描述符是为了在类中对类的成员属性进行相关操作而创建的一种方式
    - get :获取属性
    - set : 修改或者添加属性操作
    - delete：删除属性的操作
- 如果想要使用类的成员描述符，有三种方法
    - 使用类实现描述器
    - 使用属性修饰符
    - 使用property函数
        - property函数很简单
        - property（fget,fset,fdel,doc)
# 类属性property
- 应用场景：
    - 对变量除了普通的三种操作（赋值，读取，删除）还想增加一些附加的操作，那么可以通过property完成
    - fget:是对变量进行读取操作的时候应该执行的函数功能
    - fset:模拟的是对变量进行写操作的时候执行的功能
    - fdel:模拟的是删除变量的时候进行的操作  

- 无论哪种修饰符都是为了对成员属性进行相应的控制
    - 类的方式：适合多个类中的多个属性共用一个描述符，对多个类的多个属性进行同一操作
    - property： 适用当前类使用，可以控制一个类中的多个属性
    - 属性修饰符：适用于当前类中使用，控制一个类中的一个属性
# 类的内置属性
    - __dict__：一字典的方式显示类的成员组成
    - __doc__: 获取类的名称，如果在模块中使用，获取模块的名称
    - __bases__:获取某个类的所有父类，以元组的方式显示
# 类的常用的魔术方法
- 魔术方法就是不需要人为调用的方法，基本是特定的时刻自动触发
- 魔术方法的统一的特征，方法名被前后各两个下划线包裹
- 操作类
    - __init__:构造函数
    - __new__:对象实例化方法，此函数比较特殊，一般不需要使用
    - __call__: 对象当函数来使用的时候被触发，只有定义了该函数，才能把对象当作函数来使用
    - __str__:当对象当作字符串使用时才能被触发，只有定义了该函数，才能把对象当字符串来使用
    - __repr__:返回字符串，和__str__的区别具体百度一下
- 描述相关
    - __set__
    - __get__
    - __delete__
- 属性操作相关  
    - __getattr__: 访问一个不存在的属性时触发
    - __setattr__: 对成员属性进行设置的时候触发
        - 参数
            - self用来获取当前对象
            - 被设置的属性名称，以字符串形式出现
            - 需要对属性名称设置的值
        - 作用：进行属性设置的时候进行验证或者修改
        - 注意：在该方法中不能对属性直接进行赋值操作，否则进入死循环
- 运算分类相关的魔术方法
    -  __gt__:进行大于判断的时候触发的函数
        - 参数
            - self
            - 第二个参数是第二给对象
            - 返回值可以是任意值，推荐返回布尔值
- 类和对象的三种方法（具体百度）
    - 实例方法
        - 需要实例化对才能使用的方法，使用过程中可能需要截止对象的其他对象的方法完成
    - 静态方法
        - 不需要实例化，通过类直接访问
    - 类方法
        - 不需要实例化
# 类和对象的三种方法内存使用区别（百度） 
# 抽象类
    - 抽象方法：没有具体实现内容的方法称为抽象方法
    - 抽象方法的主要意义是规范了子类的行为和接口
    - 抽象类的使用要借助 import abc模块
    - 抽象类：包含抽象方法的类叫抽象类，通常称为ABC类
# 抽象类的使用
    - 抽象类可以包含抽象方法，也可以包含具体方法
    - 抽象类中可以用方法也可以有属性
    - 抽象类不允许直接实例化
    - 必须继承才可以使用，且继承的子类必须实现所有继承来的抽象方法
    - 假定子类没有实现所有继承的抽象方法，则子类也不能实例化
    - 抽象类的主要作用是设定类的标准，以便于开放的时候具有统一的规范
#自定义类
- 类其实一个类定义和各种方法的自由组合
- 可以定义类和函数，然后通过类直接赋值
- 可以借助于MethodType实现
- 借助于type实现
- 利用元类实现-MetaClass
    - 元类是类，被用来创造别的类